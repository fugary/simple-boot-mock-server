import { baseMessages } from '@/messages/base'
export const mock = baseMessages()

mock.label.method = '请求方法'
mock.label.requestBody = '请求体'
mock.label.responseBody = '响应体'
mock.label.mockResponseBody = 'Mock响应体'
mock.label.pathParams = '路径参数'
mock.label.queryParams = '请求参数'
mock.label.requestHeaders = '请求头'
mock.label.responseHeaders = '响应头'
mock.label.requestBody1 = '请求'
mock.label.responseBody1 = '响应'
mock.label.requestPath = '请求路径'
mock.label.requestName = '请求名称'
mock.label.authorization = '认证'
mock.label.default = '默认'
mock.label.statusCode = '状态码'
mock.label.matchPattern = '匹配规则'
mock.label.mockGroups = 'Mock分组'
mock.label.mockRequests = 'Mock请求'
mock.label.mockRequest = 'Mock请求'
mock.label.mockData = 'Mock数据'
mock.label.mockProjects = 'Mock项目'
mock.label.mockEnv = 'Mock变量'
mock.label.project = '项目'
mock.label.defaultProject = '默认项目'
mock.label.groupName = '分组名称'
mock.label.pathId = '路径ID'
mock.label.proxyUrl = '代理地址'
mock.label.export = '导出'
mock.label.exportAll = '导出全部'
mock.label.exportSelected = '导出选中部分'
mock.label.import = '导入'
mock.label.linkAddress = '链接地址'
mock.label.importFile = '导入文件'
mock.label.source = '数据来源'
mock.label.duplicateStrategy = '重复路径处理'
mock.label.selectFile = '选择文件'
mock.label.importDuplicateStrategyAbort = '中止导入'
mock.label.importDuplicateStrategySkip = '跳过重复路径'
mock.label.importDuplicateStrategyGenerate = '自动生成新路径'
mock.label.importTypeSimple = '当前简单Mock服务'
mock.label.importTypeFastMock = '老fastmock服务（测试）'
mock.label.importTypeSwagger = 'Swagger2/OpenAPI3.0（测试）'
mock.label.sendRequest = '发送请求'
mock.label.authType = '认证方式'
mock.label.authTypeNone = '无认证'
mock.label.authTypeBasic = 'Basic认证'
mock.label.authTypeToken = 'Token认证'
mock.label.authTypeJWT = 'JWT认证'
mock.label.authParamName = '认证参数名'
mock.label.authPrefix = '前缀'
mock.label.setDefault = '设为默认'
mock.label.dataFormat = '数据格式'
mock.label.projectCode = '项目编码'
mock.label.projectName = '项目名称'
mock.label.responseName = '响应名称'

mock.msg.noExportData = '没有需要导出的数据'
mock.msg.exportConfirm = '确认导出Mock数据？'
mock.msg.proxyUrlTooltip = '配置的请求之外的地址将发送到代理地址获取数据，支持http和https'
mock.msg.proxyUrlMsg = '代理地址必须是正常的http或者https地址'
mock.msg.pathIdMsg = '建议不要填写，自动生成'
mock.msg.duplicateStrategy = '路径是全局唯一的，所有用户共享，因此通常为自动生成的uuid'
mock.msg.importFileTitle = '导入mock数据'
mock.msg.importFileLimit = '文件大小最大限制为5MB'
mock.msg.importFileSuccess = '导入成功，共{0}条'
mock.msg.importFileNoFile = '请选择导入文件'
mock.msg.showRawData = '显示未格式化原始数据'
mock.msg.saveMockResponse = '保存响应数据，【发送请求】测试将自动保存'
mock.msg.pasteToProcess = '支持浏览器GET字符串或者JSON'
mock.msg.authParamNameTooltip = '认证默认值为：{0}，不能为空'
mock.msg.authPrefixTooltip = '前缀默认值为：{0}，可以为空'
mock.msg.requestTest = '请求测试'
mock.msg.matchPatternTest = '匹配规则测试'
mock.msg.requestNameTooltip = '简单接口名称，可不填写'
mock.msg.requestIntro = `request.body——body内容对象<br>
                        request.bodyStr——body内容字符串<br>
                        request.headers——头信息对象<br>
                        request.parameters——请求参数对象<br>
                        request.pathParameters——路径参数对象<br>
                        request.params——请求参数和路径参数合并`
mock.msg.matchPatternTooltip = `匹配规则支持javascript表达式，支持的request请求数据: <br>${mock.msg.requestIntro}`
mock.msg.projectCodeTooltip = '字母、数字、_-组成，唯一标识'
mock.msg.responseBodyTooltip = `响应内容支持请求参数替换，使用{0}格式替换数据，支持的request请求数据: <br>${mock.msg.requestIntro}`
